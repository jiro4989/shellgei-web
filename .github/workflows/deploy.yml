name: deploy

on:
  push:
    tags:
      - 'v*.*.*'

env:
  registory: 'jiro4989/websh'
  release_asset: 'websh.tar.gz'

jobs:
  skip:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Skip job"

  before:
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - run: echo "no [skip ci]"

  build-image:
    runs-on: ubuntu-latest
    needs: before
    strategy:
      matrix:
        include:
          - image-target: websh_server_runtime
            image-tag-prefix: server
          - image-target: websh_remover_runtime
            image-tag-prefix: remover
    steps:
      - uses: actions/checkout@v2

      - name: Build image (server runtime)
        run: docker build --no-cache --target ${{ matrix.image-target }} -t ${{ env.registory }}:${{ matrix.image-tag-prefix }}-latest .

      - name: Login docker
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      - name: Set tag
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF:10}

      - name: Push image to registory
        run: |
          docker push ${{ env.registory }}:${{ matrix.image-tag-prefix }}-latest
          docker tag ${{ env.registory }}:${{ matrix.image-tag-prefix }}-latest ${{ env.registory }}:${{ matrix.image-tag-prefix }}-${{ steps.vars.outputs.tag }}
          docker push ${{ env.registory }}:${{ matrix.image-tag-prefix }}-${{ steps.vars.outputs.tag }}

  build-artifact:
    runs-on: ubuntu-latest
    needs: before
    steps:
      - uses: actions/checkout@v2

      - name: Build assets
        run: |
          docker build --target base -t base .
          docker run --rm -v $PWD/websh_front:/work -t base nimble build -Y

      - name: Create artifact
        run: |
          mkdir -p dist/websh
          cp -r websh_front/public dist/websh
          git describe --tags --abbrev=0 > dist/websh/tag.txt
          pushd dist
          tar czf ${{ env.release_asset }} websh
          popd
          ls -lah dist/${{ env.release_asset }}
          mv dist/${{ env.release_asset }} .

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.release_asset }}
          path: ${{ env.release_asset }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-image
      - build-artifact
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Generate changelog
        uses: scottbrenner/generate-changelog-action@1.0.2
        id: changelog
        env:
          REPO: ${{ github.repository }}
        with:
          package-dir: '.github/package.json'
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.release_asset }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{ env.release_asset }}
          asset_name: ${{ env.release_asset }}
          asset_content_type: application/gzip

      - name: Deploy app
        run: curl -X POST -H "${{ env.HEADER }}" -d '${{ env.BODY }}' ${{ secrets.DEPLOY_URL }}
        env:
          HEADER: "Content-Type: application/json"
          BODY: '{"text": "sushi"}'
